definitions:
  customerrors.ErrBase:
    properties:
      metadata:
        additionalProperties: {}
        type: object
      msg:
        type: string
    type: object
  request.User:
    properties:
      email:
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
info:
  contact:
    email: musaev.ae@hiraise.net
    name: HiRaise
    url: https://hiraise.net/
  license:
    name: MIT License
    url: https://mit-license.org/
  title: Task Trail API
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: endpoint for login user
      parameters:
      - description: user email and password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
      summary: login user
      tags:
      - /v1/auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: refresh user tokens pair
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: refresh token is invalid
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
      summary: refresh tokens
      tags:
      - /v1/auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: endpoint for register new user
      parameters:
      - description: user email and password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
        "409":
          description: user already exists
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/customerrors.ErrBase'
      summary: register new user
      tags:
      - /v1/auth
  /v1/users/{id}:
    get:
      consumes:
      - application/json
      description: '...'
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: return user by id
      tags:
      - /v1/users
swagger: "2.0"
