definitions:
  request.changePasswordReq:
    properties:
      newPassword:
        maxLength: 50
        minLength: 8
        type: string
      oldPassword:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  request.credentials:
    properties:
      email:
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  request.emailReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request.projectAddMembersReq:
    properties:
      emails:
        items:
          type: string
        type: array
    required:
    - emails
    type: object
  request.projectCreateReq:
    properties:
      description:
        type: string
      name:
        maxLength: 254
        type: string
    required:
    - name
    type: object
  request.resetPasswordReq:
    properties:
      password:
        maxLength: 50
        minLength: 8
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  request.updateReq:
    properties:
      username:
        maxLength: 100
        type: string
    type: object
  request.verifyReq:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  response.ErrAPI:
    properties:
      metadata:
        additionalProperties: {}
        type: object
      msg:
        type: string
    type: object
  response.ProjectRes:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      tasksCount:
        type: integer
    type: object
  response.avatarRes:
    properties:
      avatarUrl:
        type: string
    type: object
  response.currentRes:
    properties:
      avatarUrl:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  response.projectCreateRes:
    properties:
      id:
        type: integer
    type: object
info:
  contact:
    email: musaev.ae@hiraise.net
    name: HiRaise
    url: https://hiraise.net/
  license:
    name: MIT License
    url: https://mit-license.org/
  title: Task Trail API
  version: "1.0"
paths:
  /v1/auth/check:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: check user authentication
      tags:
      - /v1/auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: user email and password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: login user
      tags:
      - /v1/auth
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: logout user
      tags:
      - /v1/auth
  /v1/auth/password/change:
    post:
      consumes:
      - application/json
      parameters:
      - description: old and new password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.changePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: change user password
      tags:
      - /v1/auth
  /v1/auth/password/forgot:
    post:
      consumes:
      - application/json
      parameters:
      - description: user email
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.emailReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: send reset password email
      tags:
      - /v1/auth
  /v1/auth/password/reset:
    post:
      consumes:
      - application/json
      parameters:
      - description: token and new password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.resetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: reset user password
      tags:
      - /v1/auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: refresh token is invalid
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: refresh tokens pair
      tags:
      - /v1/auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: endpoint for register new user
      parameters:
      - description: user email and password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "409":
          description: user already exists
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: register new user
      tags:
      - /v1/auth
  /v1/auth/resend-verification:
    post:
      consumes:
      - application/json
      parameters:
      - description: user email
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.emailReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: resend account verification email
      tags:
      - /v1/auth
  /v1/auth/verify:
    post:
      consumes:
      - application/json
      parameters:
      - description: token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.verifyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: token is invalid
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "404":
          description: token or user not found
          schema:
            $ref: '#/definitions/response.ErrAPI'
      summary: verify user account
      tags:
      - /v1/auth
  /v1/projects:
    get:
      consumes:
      - application/json
      description: List of projects where current user is a member or owner
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ProjectRes'
            type: array
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: get list of projects
      tags:
      - /v1/project
    post:
      consumes:
      - application/json
      parameters:
      - description: project data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.projectCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.projectCreateRes'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: create new project
      tags:
      - /v1/project
  /v1/projects/{id}/members:
    post:
      consumes:
      - application/json
      description: validate list of candidates, create accounts if they do not exist
        yet, and add them to the project
      parameters:
      - description: project id
        in: path
        name: id
        required: true
        type: integer
      - description: emails
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.projectAddMembersReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: add new members to project
      tags:
      - /v1/project
  /v1/projects/candidates:
    get:
      consumes:
      - application/json
      description: Candidates are participatns in other projects owned by the current
        user
      parameters:
      - description: project id
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ProjectRes'
            type: array
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "404":
          description: project not found
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: get list of candidates to add to the project
      tags:
      - /v1/project
  /v1/users/{id}:
    get:
      consumes:
      - application/json
      description: '...'
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: return user by id
      tags:
      - /v1/users
  /v1/users/me:
    get:
      consumes:
      - application/json
      description: '...'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.currentRes'
      security:
      - BearerAuth: []
      summary: return current user
      tags:
      - /v1/users
    patch:
      consumes:
      - application/json
      description: '...'
      parameters:
      - description: user data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.updateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.currentRes'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: update current user
      tags:
      - /v1/users
  /v1/users/me/avatar:
    patch:
      consumes:
      - application/json
      description: '...'
      parameters:
      - description: new file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.avatarRes'
        "401":
          description: authentication required
          schema:
            $ref: '#/definitions/response.ErrAPI'
      security:
      - BearerAuth: []
      summary: upload new avatar
      tags:
      - /v1/users
securityDefinitions:
  BearerAuth:
    in: cookie
    name: at
    type: apiKey
swagger: "2.0"
